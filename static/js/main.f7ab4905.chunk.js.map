{"version":3,"sources":["components/PokemonListItem/style.module.css","Util/string.ts","Util/pokemonTypes.ts","res/normal.png","res/grass.png","res/fire.png","res/water.png","res/electric.png","res/ice.png","res/fighting.png","res/poison.png","res/ground.png","res/flying.png","res/psychic.png","res/bug.png","res/rock.png","res/ghost.png","res/dark.png","res/dragon.png","res/steel.png","res/fairy.png","components/TypeSelect.tsx","components/FetchButton.tsx","components/PokemonListItem/index.tsx","components/PokemonListItem/PokemonListItem.tsx","components/PokemonList.tsx","components/Attribution.tsx","components/PokeballSpinner.tsx","components/ExclusiveTypeFilter.tsx","components/TypeMatchupModal.tsx","App.tsx","index.tsx"],"names":["module","exports","Capitalise","input","charAt","toUpperCase","slice","TYPES","getSymbol","pokemonType","NormalSymbol","GrassSymbol","FireSymbol","WaterSymbol","ElectricSymbol","IceSymbol","FightingSymbol","PoisonSymbol","GroundSymbol","FlyingSymbol","PsychicSymbol","BugSymbol","RockSymbol","GhostSymbol","DarkSymbol","DragonSymbol","SteelSymbol","FairySymbol","TypeSelect","title","value","onChange","Fragment","className","e","target","map","type","src","alt","FetchButton","onClick","Component","pokemon","styles","pokeNumber","number","C","name","imageUrl","type1","type2","id","PokemonList","data","Attribution","href","PokeballSpinner","ExclusiveTypeFilter","checked","TypeMatchupModal","show","onHide","getOffensiveMultiplier1","typeName","multiplier","strongAgainst","includes","weakAgainst","zeroAgainst","getOffensiveMultiplier2","getDefensiveMultiplier","vulnerableTo","resistantTo","immuneTo","Modal","Header","closeButton","Body","API_URL","App","React","useState","loading","setLoading","showModal","setShowModal","exclusiveType","setExclusiveType","typeInput1","setTypeInput1","typeInput2","setTypeInput2","setType1","setType2","setPokemon","selectPokemonData","a","filteredData","filter","x","pokemonDataSet","axios","get","url","pokemonData","push","species","split","sprites","front_default","types","fetchPokemon","length","typeData1","damages1","damage_relations","double_damage_to","t","double_damage_from","half_damage_to","half_damage_from","no_damage_to","no_damage_from","typeData2","damages2","pokemonData1","pokemonData2","typeData","damages","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,WAAa,4B,yMCDlBC,G,MAAa,SAACC,GACvB,OAAOA,EAAMC,OAAO,GAAGC,cAAgBF,EAAMG,MAAM,KCD1CC,EAAQ,CACjB,SACA,QACA,OACA,QACA,WACA,MACA,WACA,SACA,SACA,SACA,UACA,MACA,OACA,QACA,OACA,SACA,QACA,SClBW,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,qCCA1B,MAA0B,gCCA1B,MAA0B,qCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,oCCA1B,MAA0B,gCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,iCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,kCC+BnCC,EAAY,SAACC,GACf,OAAQA,GAEJ,IAAK,SAAU,OAAOC,EACtB,IAAK,QAAS,OAAOC,EACrB,IAAK,OAAQ,OAAOC,EACpB,IAAK,QAAS,OAAOC,EACrB,IAAK,WAAY,OAAOC,EACxB,IAAK,MAAO,OAAOC,EACnB,IAAK,WAAY,OAAOC,EACxB,IAAK,SAAU,OAAOC,EACtB,IAAK,SAAU,OAAOC,EACtB,IAAK,SAAU,OAAOC,EACtB,IAAK,UAAW,OAAOC,EACvB,IAAK,MAAO,OAAOC,EACnB,IAAK,OAAQ,OAAOC,EACpB,IAAK,QAAS,OAAOC,EACrB,IAAK,OAAQ,OAAOC,EACpB,IAAK,SAAU,OAAOC,EACtB,IAAK,QAAS,OAAOC,EACrB,IAAK,QAAS,OAAOC,IAiBdC,EAbI,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAC/B,OAAO,eAAC,IAAMC,SAAP,WACH,uBAAOC,UAAU,UAAjB,SAA4BJ,IAC5B,yBAAQI,UAAU,eAAeH,MAAOA,EAAOC,SAAQ,+GAAE,SAACG,GAAOH,EAASG,EAAEC,OAAOL,UAAnF,UACA,2BAEIvB,EAAM6B,KAAI,SAACC,GAAD,OAAU,wBAA8BP,MAAOO,EAArC,SAA4CnC,EAAWmC,IAA1C,WAAWA,SAG/CP,GAAS,qBAAKQ,IAAK9B,EAAUsB,GAAQS,IAAK,SAAWT,QCtD/CU,EAJK,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAAkC,wBAAQR,UAAU,qCAAqCQ,QAASA,EAAhE,+B,iBCJvCC,ECOS,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QACxB,OAAO,qBAAIV,UAAU,kBAAd,UACH,uBAAMA,UAAWW,IAAOC,WAAxB,cAAsCF,EAAQG,UAC7CC,EAAEJ,EAAQK,MACRL,EAAQM,SAAW,qBAAKX,IAAKK,EAAQM,SAAUV,IAAKI,EAAQK,OAAW,yDACxE,wCAAWD,EAAEJ,EAAQO,OAAQP,EAAQQ,OAAR,YAAsBJ,EAAEJ,EAAQQ,aAJvB,WAAaR,EAAQS,KCIpDC,EANK,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAA+B,oBAAIrB,UAAU,uBAAd,SAE/CqB,EAAKlB,KAAI,SAACO,GAAD,OAAa,cAAC,EAAD,CAAiBA,QAASA,UCArCY,EAVK,kBAAM,wBAAQtB,UAAU,YAAlB,SACtB,qGAEI,uBAFJ,cAGe,mBAAGuB,KAAK,sBAAR,sBACX,uBAJJ,6BAK8B,mBAAGA,KAAK,uCAAR,2CCCnBC,EALS,kBAAM,eAAC,IAAMzB,SAAP,WAC1B,qBAAKC,UAAU,qBACf,kDCKWyB,EAJa,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAS5B,EAAX,EAAWA,SAAX,OAAoD,gCAC5E,iEAA2C,uBAAOE,UAAU,OAAOI,KAAK,WAAWsB,QAASA,EAAS5B,SAAUA,Q,QCsHpG6B,EA9GU,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,OAAQZ,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MACtCY,EAA0B,SAACC,GAC7B,IAAIC,EAAa,EAEjB,OAAKf,GAIDA,EAAMgB,cAAcC,SAASH,KAC7BC,GAAc,GAGdf,EAAMkB,YAAYD,SAASH,KAC3BC,GAAc,IAGdf,EAAMmB,YAAYF,SAASH,KAC3BC,GAAc,GAGX,IAAIA,GAfA,IAkBTK,EAA0B,SAACN,GAC7B,IAAKb,EACD,MAAO,GAGX,IAAIc,EAAa,EAcjB,OAZId,EAAMe,cAAcC,SAASH,KAC7BC,GAAc,GAGdd,EAAMiB,YAAYD,SAASH,KAC3BC,GAAc,IAGdd,EAAMkB,YAAYF,SAASH,KAC3BC,GAAc,GAGX,IAAIA,GAGTM,EAAyB,SAACP,GAC5B,IAAKd,IAAUC,EACX,MAAO,GAGX,IAAIc,EAAa,EA8BjB,OA5BIf,IACIA,EAAMsB,aAAaL,SAASH,KAC5BC,GAAc,GAGdf,EAAMuB,YAAYN,SAASH,KAC3BC,GAAc,IAGdf,EAAMwB,SAASP,SAASH,KACxBC,GAAc,IAIlBd,IACIA,EAAMqB,aAAaL,SAASH,KAC5BC,GAAc,GAGdd,EAAMsB,YAAYN,SAASH,KAC3BC,GAAc,IAGdd,EAAMuB,SAASP,SAASH,KACxBC,GAAc,IAIf,IAAIA,GAGf,OAAO,eAACU,EAAA,EAAD,CAAOd,KAAMA,EAAMC,OAAQA,EAA3B,UACH,cAACa,EAAA,EAAMC,OAAP,CAAcC,aAAa,EAA3B,SAAiC,iDACjC,cAACF,EAAA,EAAMG,KAAP,UACA,wBAAO7C,UAAU,+BAAjB,UACI,gCACI,+BACI,oBAAIA,UAAU,gBAAd,2BACA,oBAAIA,UAAU,gBAAd,SAA+BiB,GAAS,WAAWH,EAAEG,EAAMF,QAC3D,oBAAIf,UAAU,gBAAd,SAA+BkB,GAAS,WAAWJ,EAAEI,EAAMH,QAC3D,oBAAIf,UAAU,gBAAd,UAAgCiB,GAASC,IAAU,kBAG3D,gCAEI5C,EAAM6B,KAAI,SAACC,GAAD,OAAU,+BAChB,6BAAKU,EAAEV,KACP,6BAAK0B,EAAwB1B,KAC7B,6BAAKiC,EAAwBjC,KAC7B,6BAAKkC,EAAuBlC,sBCpG1C0C,EAAU,iCAuIDC,EArIH,WAAO,IAiHM1B,EAjHP,EACc2B,IAAMC,UAAS,GAD7B,mBACTC,EADS,KACAC,EADA,OAEkBH,IAAMC,UAAS,GAFjC,mBAETG,EAFS,KAEEC,EAFF,OAG0BL,IAAMC,UAAS,GAHzC,mBAGTK,EAHS,KAGMC,EAHN,OAIoBP,IAAMC,SAAS,IAJnC,mBAITO,EAJS,KAIGC,EAJH,OAKoBT,IAAMC,SAAS,IALnC,mBAKTS,EALS,KAKGC,EALH,OAOUX,IAAMC,SAAS,MAPzB,mBAOThC,EAPS,KAOF2C,EAPE,OAQUZ,IAAMC,SAAS,MARzB,mBAQT/B,EARS,KAQF2C,EARE,OAScb,IAAMC,SAAS,IAT7B,mBASTvC,EATS,KASAoD,EATA,KAWVC,EAAiB,uCAAG,WAAO1C,GAAP,yBAAA2C,EAAA,sDAClBC,EAAe5C,EAAK6C,QAAO,SAACC,GAAD,OAAQA,EAAEzD,QAAQK,KAAKmB,SAAS,YAAciC,EAAEzD,QAAQK,KAAKmB,SAAS,YACjGkC,EAA6B,GAFX,cAIEH,GAJF,gEAIbzF,EAJa,iBAKE6F,IAAMC,IAAI9F,EAAYkC,QAAQ6D,KALhC,OAKlBC,EALkB,OAOtBJ,EAAeK,KAAK,CAClBtD,GAAIqD,EAAYnD,KAAKF,GACrBJ,KAAMyD,EAAYnD,KAAKN,KACvBF,OAAQ2D,EAAYnD,KAAKqD,QAAQH,IAAII,MAAM,KAAK,GAChD3D,SAAUwD,EAAYnD,KAAKuD,QAAQC,cACnC5D,MAAOuD,EAAYnD,KAAKyD,MAAM,GAAG1E,KAAKW,KACtCG,MAAOsD,EAAYnD,KAAKyD,MAAM,IAAMN,EAAYnD,KAAKyD,MAAM,GAAG1E,KAAKW,OAb/C,wKAiBjBqD,GAjBiB,gEAAH,sDAoBjBW,EAAY,uCAAG,kDAAAf,EAAA,yDACnBF,EAAW,IACXX,GAAW,KAEPK,EAAWwB,OAAS,GAAKtB,EAAWsB,OAAS,GAJ9B,iCAKMX,IAAMC,IAAN,UAAaxB,EAAb,YAAwBU,IAL9B,cAKbyB,EALa,OAK6C5D,KAC1D6D,EAAWD,EAAUE,iBAEzBvB,EAAS,CACP7C,KAAMkE,EAAUlE,KAChBkB,cAAeiD,EAASE,iBAAiBjF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC5EwB,aAAc2C,EAASI,mBAAmBnF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC7EoB,YAAa+C,EAASK,eAAepF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACxEyB,YAAa0C,EAASM,iBAAiBrF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC1EqB,YAAa8C,EAASO,aAAatF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACtE0B,SAAUyC,EAASQ,eAAevF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,UAftD,UAkBMsD,IAAMC,IAAN,UAAaxB,EAAb,YAAwBY,IAlB9B,eAkBbiC,EAlBa,OAkB6CtE,KAC1DuE,EAAWD,EAAUR,iBAEzBtB,EAAS,CACP9C,KAAM4E,EAAU5E,KAChBkB,cAAe2D,EAASR,iBAAiBjF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC5EwB,aAAcqD,EAASN,mBAAmBnF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC7EoB,YAAayD,EAASL,eAAepF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACxEyB,YAAaoD,EAASJ,iBAAiBrF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC1EqB,YAAawD,EAASH,aAAatF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACtE0B,SAAUyC,EAASQ,eAAevF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,UA5BtD,UA+BQgD,EAAkBkB,EAAUvE,SA/BpC,eA+BbmF,EA/Ba,iBAgCQ9B,EAAkB4B,EAAUjF,SAhCpC,QAgCboF,EAhCa,OAkCjBhC,EAAW+B,EAAa3B,QAAO,SAACC,GAAD,OAAiB2B,EAAa3F,KAAI,SAACgE,GAAD,OAAOA,EAAEhD,MAAIe,SAASiC,EAAEhD,QAlCxE,6BAmCRqC,EAAWwB,OAAS,GAnCZ,kCAoCKX,IAAMC,IAAN,UAAaxB,EAAb,YAAwBU,IApC7B,eAoCbuC,EApCa,OAoC4C1E,KACzD2E,EAAUD,EAASZ,iBAEvBvB,EAAS,CACP7C,KAAMgF,EAAShF,KACfkB,cAAe+D,EAAQZ,iBAAiBjF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC3EwB,aAAcyD,EAAQV,mBAAmBnF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC5EoB,YAAa6D,EAAQT,eAAepF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACvEyB,YAAawD,EAAQR,iBAAiBrF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACzEqB,YAAa4D,EAAQP,aAAatF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACrE0B,SAAUuD,EAAQN,eAAevF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,UAGtE8C,EAAS,MAjDQ,UAmDOE,EAAkBgC,EAASrF,SAnDlC,QAmDb8D,EAnDa,OAqDjBV,EAAWU,GArDM,6BAsDRd,EAAWsB,OAAS,GAtDZ,kCAuDKX,IAAMC,IAAN,UAAaxB,EAAb,YAAwBY,IAvD7B,eAuDbqC,EAvDa,OAuD4C1E,KACzD2E,EAAUD,EAASZ,iBAEvBtB,EAAS,CACP9C,KAAMgF,EAAShF,KACfkB,cAAe+D,EAAQZ,iBAAiBjF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC3EwB,aAAcyD,EAAQV,mBAAmBnF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QAC5EoB,YAAa6D,EAAQT,eAAepF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACvEyB,YAAawD,EAAQR,iBAAiBrF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACzEqB,YAAa4D,EAAQP,aAAatF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,QACrE0B,SAAUuD,EAAQN,eAAevF,KAAI,SAACkF,GAAD,OAA6BA,EAAEtE,UAGtE6C,EAAS,MApEQ,UAsEOG,EAAkBgC,EAASrF,SAtElC,QAsEb8D,EAtEa,OAwEjBV,EAAWU,GAxEM,QA2EnBrB,GAAW,GA3EQ,4CAAH,qDAwFlB,OAAO,sBAAKnD,UAAU,MAAf,UACH,+CACA,cAAC,EAAD,CAAYJ,MAAO,SAAUC,MAAO2D,EAAY1D,SAAU2D,IAC1D,cAAC,EAAD,CAAqB/B,QAAS4B,IAAkBI,EAAY5D,SAbpC,WAC1ByD,GAAkBD,MAahB,cAAC,EAAD,CAAY1D,MAAO,SAAUC,MAAO6D,EAAY5D,SAAU6D,KACvDH,GAAcE,IAAe,wBAAQ1D,UAAU,2BAA2BQ,QAAS,kBAAM6C,GAAa,IAAzE,gCAChC,cAAC,EAAD,CAAkBzB,KAAMwB,EAAWvB,OAAQ,kBAAMwB,GAAa,IAAQpC,MAAOA,EAAOC,MAAOA,IAC3F,cAAC,EAAD,CAAaV,QAASuE,IACpB7B,GAAW,cAAC,EAAD,IACb,cAAC,EAAD,CAAa7B,MAfMA,EAecX,GAd1BgD,GAAcJ,EACnBjC,EAAK6C,QAAO,SAACC,GAAD,OAAOA,EAAElD,QAAUuC,QAA0ByC,IAAZ9B,EAAEjD,SAC/CG,KAaF,cAAC,EAAD,Q,YCvIN6E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f7ab4905.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pokeNumber\":\"style_pokeNumber__2ctK-\"};","export const Capitalise = (input: string) => {\r\n    return input.charAt(0).toUpperCase() + input.slice(1);\r\n}","export const TYPES = [\r\n    \"normal\",\r\n    \"grass\",\r\n    \"fire\",\r\n    \"water\",\r\n    \"electric\",\r\n    \"ice\",\r\n    \"fighting\",\r\n    \"poison\",\r\n    \"ground\",\r\n    \"flying\",\r\n    \"psychic\",\r\n    \"bug\",\r\n    \"rock\",\r\n    \"ghost\",\r\n    \"dark\",\r\n    \"dragon\",\r\n    \"steel\",\r\n    \"fairy\",\r\n]","export default __webpack_public_path__ + \"static/media/normal.a9776648.png\";","export default __webpack_public_path__ + \"static/media/grass.0c8a77ef.png\";","export default __webpack_public_path__ + \"static/media/fire.3277d77f.png\";","export default __webpack_public_path__ + \"static/media/water.2fcb40f7.png\";","export default __webpack_public_path__ + \"static/media/electric.2e3808d7.png\";","export default __webpack_public_path__ + \"static/media/ice.a9638502.png\";","export default __webpack_public_path__ + \"static/media/fighting.c777e8ec.png\";","export default __webpack_public_path__ + \"static/media/poison.8f3b0bcd.png\";","export default __webpack_public_path__ + \"static/media/ground.0ddb1818.png\";","export default __webpack_public_path__ + \"static/media/flying.7de276f3.png\";","export default __webpack_public_path__ + \"static/media/psychic.7f7cc4f4.png\";","export default __webpack_public_path__ + \"static/media/bug.167802fd.png\";","export default __webpack_public_path__ + \"static/media/rock.06ce1a1f.png\";","export default __webpack_public_path__ + \"static/media/ghost.7452d549.png\";","export default __webpack_public_path__ + \"static/media/dark.c0450a81.png\";","export default __webpack_public_path__ + \"static/media/dragon.3c3d4c99.png\";","export default __webpack_public_path__ + \"static/media/steel.86c2d7c9.png\";","export default __webpack_public_path__ + \"static/media/fairy.b3cc9537.png\";","import React from \"react\";\r\n\r\nimport { Capitalise } from \"Util/string\";\r\nimport { TYPES } from \"Util/pokemonTypes\";\r\n\r\nimport NormalSymbol from \"res/normal.png\";\r\nimport GrassSymbol from \"res/grass.png\";\r\nimport FireSymbol from \"res/fire.png\";\r\nimport WaterSymbol from \"res/water.png\";\r\nimport ElectricSymbol from \"res/electric.png\";\r\nimport IceSymbol from \"res/ice.png\";\r\nimport FightingSymbol from \"res/fighting.png\";\r\nimport PoisonSymbol from \"res/poison.png\";\r\nimport GroundSymbol from \"res/ground.png\";\r\nimport FlyingSymbol from \"res/flying.png\";\r\nimport PsychicSymbol from \"res/psychic.png\";\r\nimport BugSymbol from \"res/bug.png\";\r\nimport RockSymbol from \"res/rock.png\";\r\nimport GhostSymbol from \"res/ghost.png\";\r\nimport DarkSymbol from \"res/dark.png\";\r\nimport DragonSymbol from \"res/dragon.png\";\r\nimport SteelSymbol from \"res/steel.png\";\r\nimport FairySymbol from \"res/fairy.png\";\r\n\r\n\r\ninterface ITypeSelectProps {\r\n    title: string;\r\n    value: string;\r\n    onChange(input: string): void;\r\n}\r\n\r\nconst getSymbol = (pokemonType: string) => {\r\n    switch (pokemonType)\r\n    {\r\n        case \"normal\": return NormalSymbol;\r\n        case \"grass\": return GrassSymbol;\r\n        case \"fire\": return FireSymbol;\r\n        case \"water\": return WaterSymbol;\r\n        case \"electric\": return ElectricSymbol;\r\n        case \"ice\": return IceSymbol;\r\n        case \"fighting\": return FightingSymbol;\r\n        case \"poison\": return PoisonSymbol;\r\n        case \"ground\": return GroundSymbol;\r\n        case \"flying\": return FlyingSymbol;\r\n        case \"psychic\": return PsychicSymbol;\r\n        case \"bug\": return BugSymbol;\r\n        case \"rock\": return RockSymbol;\r\n        case \"ghost\": return GhostSymbol;\r\n        case \"dark\": return DarkSymbol;\r\n        case \"dragon\": return DragonSymbol;\r\n        case \"steel\": return SteelSymbol;\r\n        case \"fairy\": return FairySymbol;\r\n    }\r\n}\r\n\r\nconst TypeSelect = ({title, value, onChange}: ITypeSelectProps) => {\r\n    return <React.Fragment>\r\n        <label className=\"d-block\">{title}</label>\r\n        <select className=\"form-control\" value={value} onChange={(e) => {onChange(e.target.value)}}>\r\n        <option></option>\r\n        {\r\n            TYPES.map((type) => <option key={\"type1-o-\"+type} value={type}>{Capitalise(type)}</option>)\r\n        }\r\n        </select>\r\n        {value && <img src={getSymbol(value)} alt={\"Type: \" + value} />}\r\n    </React.Fragment>\r\n}\r\n\r\nexport default TypeSelect;","import React from \"react\";\r\n\r\ninterface IFetchButtonProps {\r\n    onClick(): void;\r\n}\r\n\r\nconst FetchButton = ({onClick}: IFetchButtonProps) => <button className=\"btn btn-primary d-block w-100 my-3\" onClick={onClick}>\r\n    Find Me Pokemon!\r\n</button>\r\n\r\nexport default FetchButton;","import Component from \"./PokemonListItem\";\r\n\r\nexport default Component;","import { IPokemon } from \"models/Pokemon\";\r\nimport { Capitalise as C } from \"Util/string\";\r\n\r\nimport styles from \"./style.module.css\";\r\n\r\nexport interface IPokemonListItemProps {\r\n    pokemon: IPokemon;\r\n}\r\n\r\nconst PokemonListItem = ({pokemon}: IPokemonListItemProps) => {\r\n  return <li className=\"list-group-item\" key={\"pokemon-\" + pokemon.id}>\r\n      <span className={styles.pokeNumber}>#{pokemon.number}</span>\r\n      {C(pokemon.name)}\r\n        {pokemon.imageUrl ? <img src={pokemon.imageUrl} alt={pokemon.name} /> : <strong> No Image Available</strong>}\r\n        <p>Types: {C(pokemon.type1)}{pokemon.type2 && `, ${C(pokemon.type2)}`}</p>\r\n  </li>\r\n}\r\n\r\nexport default PokemonListItem;","import { IPokemon } from \"models/Pokemon\";\r\n\r\nimport PokemonListItem from \"components/PokemonListItem\";\r\n\r\ninterface IPokemonListProps {\r\n    data: IPokemon[];\r\n}\r\n\r\nconst PokemonList = ({data}: IPokemonListProps) => <ul className=\"list-group poke-list\">\r\n{\r\n    data.map((pokemon) => <PokemonListItem pokemon={pokemon} />)\r\n}\r\n</ul>\r\n\r\nexport default PokemonList;","const Attribution = () => <footer className=\"text-left\">\r\n    <p>\r\n        Pokémon and Pokémon character names are trademarks of Nintendo\r\n        <br/>\r\n        Data from: <a href=\"https://pokeapi.co/\">Poke API</a>\r\n        <br/>\r\n        Pokemon Type Images from: <a href=\"https://www.deviantart.com/falke2009\">Falke2009 on DeviantArt</a>\r\n    </p>\r\n</footer>\r\n\r\nexport default Attribution;","import React from \"react\";\r\n\r\nconst PokeballSpinner = () => <React.Fragment>\r\n    <div className=\"pokeball-spinner\" />\r\n    <span>Loading...</span>\r\n</React.Fragment>\r\n\r\nexport default PokeballSpinner;\r\n","interface IExclusiveTypeFilterProps {\r\n    checked: boolean;\r\n    onChange(): void;\r\n}\r\n\r\nconst ExclusiveTypeFilter = ({checked, onChange}: IExclusiveTypeFilterProps) => <div>\r\n    <label>Filter exclusively on Type 1</label><input className=\"mx-4\" type=\"checkbox\" checked={checked} onChange={onChange} />\r\n</div>\r\n\r\nexport default ExclusiveTypeFilter;","import { IPokemonType } from 'models/Pokemon';\r\nimport * as React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nimport { TYPES } from 'Util/pokemonTypes';\r\nimport { Capitalise as C } from \"Util/string\";\r\n\r\nexport interface ITypeMatchupModalProps {\r\n    show: boolean;\r\n    onHide(): void;\r\n    type1: IPokemonType;\r\n    type2: IPokemonType;\r\n}\r\n\r\nconst TypeMatchupModal = ({show, onHide, type1, type2}: ITypeMatchupModalProps) => {\r\n    const getOffensiveMultiplier1 = (typeName: string) => {        \r\n        let multiplier = 1;\r\n\r\n        if (!type1) {\r\n            return \"\";\r\n        }\r\n\r\n        if (type1.strongAgainst.includes(typeName)) {\r\n            multiplier *= 2;\r\n        }\r\n\r\n        if (type1.weakAgainst.includes(typeName)) {\r\n            multiplier *= 0.5;\r\n        }\r\n\r\n        if (type1.zeroAgainst.includes(typeName)) {\r\n            multiplier *= 0;\r\n        }\r\n\r\n        return \"x\"+multiplier;\r\n    }\r\n\r\n    const getOffensiveMultiplier2 = (typeName: string) => {\r\n        if (!type2) {\r\n            return \"\";\r\n        }\r\n\r\n        let multiplier = 1;\r\n\r\n        if (type2.strongAgainst.includes(typeName)) {\r\n            multiplier *= 2;\r\n        }\r\n\r\n        if (type2.weakAgainst.includes(typeName)) {\r\n            multiplier *= 0.5;\r\n        }\r\n\r\n        if (type2.zeroAgainst.includes(typeName)) {\r\n            multiplier *= 0;\r\n        }\r\n\r\n        return \"x\"+multiplier;\r\n    }\r\n\r\n    const getDefensiveMultiplier = (typeName: string) => {\r\n        if (!type1 && !type2) {\r\n            return \"\";\r\n        }\r\n\r\n        let multiplier = 1;\r\n\r\n        if (type1) {\r\n            if (type1.vulnerableTo.includes(typeName)) {\r\n                multiplier *= 2;\r\n            }\r\n\r\n            if (type1.resistantTo.includes(typeName)) {\r\n                multiplier *= 0.5;\r\n            }\r\n\r\n            if (type1.immuneTo.includes(typeName)) {\r\n                multiplier *= 0;\r\n            }\r\n        }\r\n\r\n        if (type2) {\r\n            if (type2.vulnerableTo.includes(typeName)) {\r\n                multiplier *= 2;\r\n            }\r\n\r\n            if (type2.resistantTo.includes(typeName)) {\r\n                multiplier *= 0.5;\r\n            }\r\n\r\n            if (type2.immuneTo.includes(typeName)) {\r\n                multiplier *= 0;\r\n            }\r\n        }\r\n\r\n        return \"x\"+multiplier;\r\n    }\r\n\r\n    return <Modal show={show} onHide={onHide}>\r\n        <Modal.Header closeButton={true}><h3>Type Matchups</h3></Modal.Header>\r\n        <Modal.Body>\r\n        <table className=\"table table-striped table-sm\">\r\n            <thead>\r\n                <tr>\r\n                    <td className=\"table-primary\">Opponent Type</td>\r\n                    <td className=\"table-primary\">{type1 && \"Offense \"+C(type1.name)}</td>\r\n                    <td className=\"table-primary\">{type2 && \"Offense \"+C(type2.name)}</td>\r\n                    <td className=\"table-primary\">{(type1 || type2) && \"Defense \"}</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                TYPES.map((type) => <tr>\r\n                    <td>{C(type)}</td>\r\n                    <td>{getOffensiveMultiplier1(type)}</td>\r\n                    <td>{getOffensiveMultiplier2(type)}</td>\r\n                    <td>{getDefensiveMultiplier(type)}</td>\r\n                </tr>)\r\n            }\r\n            </tbody>\r\n        </table>\r\n        </Modal.Body>\r\n    </Modal>\r\n}\r\n\r\nexport default TypeMatchupModal;\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport './App.css';\r\n\r\nimport { IPokemon, IPokemonFromType, IPokemonType, IPokemonTypeDataItem } from 'models/Pokemon';\r\n\r\nimport TypeSelect from 'components/TypeSelect';\r\nimport FetchButton from \"components/FetchButton\";\r\nimport PokemonList from 'components/PokemonList';\r\nimport Attribution from 'components/Attribution';\r\nimport PokeballSpinner from 'components/PokeballSpinner';\r\nimport ExclusiveTypeFilter from 'components/ExclusiveTypeFilter';\r\nimport TypeMatchupModal from 'components/TypeMatchupModal';\r\n\r\nconst API_URL = \"https://pokeapi.co/api/v2/type\";\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [showModal, setShowModal] = React.useState(false);\r\n  const [exclusiveType, setExclusiveType] = React.useState(false);\r\n  const [typeInput1, setTypeInput1] = React.useState(\"\" as string);\r\n  const [typeInput2, setTypeInput2] = React.useState(\"\" as string);  \r\n  \r\n  const [type1, setType1] = React.useState(null as unknown as IPokemonType)\r\n  const [type2, setType2] = React.useState(null as unknown as IPokemonType)\r\n  const [pokemon, setPokemon] = React.useState([] as IPokemon[]);\r\n\r\n  const selectPokemonData = async (data: IPokemonFromType[]): Promise<IPokemon[]> => {    \r\n    const filteredData = data.filter((x) => !x.pokemon.name.includes(\"-totem\") && !x.pokemon.name.includes(\"-gmax\"));\r\n    const pokemonDataSet: IPokemon[] = [];\r\n\r\n    for (const pokemonType of filteredData) {\r\n      let pokemonData = await axios.get(pokemonType.pokemon.url);\r\n\r\n      pokemonDataSet.push({\r\n        id: pokemonData.data.id,\r\n        name: pokemonData.data.name,\r\n        number: pokemonData.data.species.url.split(\"/\")[6],\r\n        imageUrl: pokemonData.data.sprites.front_default,\r\n        type1: pokemonData.data.types[0].type.name,\r\n        type2: pokemonData.data.types[1] && pokemonData.data.types[1].type.name,\r\n      })\r\n    }\r\n\r\n    return pokemonDataSet;\r\n  }\r\n\r\n  const fetchPokemon = async () => {\r\n    setPokemon([]);\r\n    setLoading(true);\r\n\r\n    if (typeInput1.length > 0 && typeInput2.length > 0) {\r\n      let typeData1 = (await axios.get(`${API_URL}/${typeInput1}`)).data;\r\n      let damages1 = typeData1.damage_relations;\r\n\r\n      setType1({\r\n        name: typeData1.name,\r\n        strongAgainst: damages1.double_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        vulnerableTo: damages1.double_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        weakAgainst: damages1.half_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        resistantTo: damages1.half_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        zeroAgainst: damages1.no_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        immuneTo: damages1.no_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n      });\r\n      \r\n      let typeData2 = (await axios.get(`${API_URL}/${typeInput2}`)).data;\r\n      let damages2 = typeData2.damage_relations;\r\n\r\n      setType2({\r\n        name: typeData2.name,\r\n        strongAgainst: damages2.double_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        vulnerableTo: damages2.double_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        weakAgainst: damages2.half_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        resistantTo: damages2.half_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        zeroAgainst: damages2.no_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        immuneTo: damages1.no_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n      });\r\n\r\n      let pokemonData1 = await selectPokemonData(typeData1.pokemon);\r\n      let pokemonData2 = await selectPokemonData(typeData2.pokemon);\r\n                  \r\n      setPokemon(pokemonData1.filter((x: IPokemon) => pokemonData2.map((x) => x.id).includes(x.id)));\r\n    } else if (typeInput1.length > 0) {\r\n      let typeData = (await axios.get(`${API_URL}/${typeInput1}`)).data;\r\n      let damages = typeData.damage_relations;\r\n\r\n      setType1({\r\n        name: typeData.name,\r\n        strongAgainst: damages.double_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        vulnerableTo: damages.double_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        weakAgainst: damages.half_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        resistantTo: damages.half_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        zeroAgainst: damages.no_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        immuneTo: damages.no_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n      });\r\n\r\n      setType2(null as unknown as IPokemonType);\r\n      \r\n      let pokemonData = await selectPokemonData(typeData.pokemon);\r\n\r\n      setPokemon(pokemonData);\r\n    } else if (typeInput2.length > 0) {\r\n      let typeData = (await axios.get(`${API_URL}/${typeInput2}`)).data;\r\n      let damages = typeData.damage_relations;\r\n\r\n      setType2({\r\n        name: typeData.name,\r\n        strongAgainst: damages.double_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        vulnerableTo: damages.double_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        weakAgainst: damages.half_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        resistantTo: damages.half_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n        zeroAgainst: damages.no_damage_to.map((t: IPokemonTypeDataItem) => t.name),\r\n        immuneTo: damages.no_damage_from.map((t: IPokemonTypeDataItem) => t.name),\r\n      });\r\n\r\n      setType1(null as unknown as IPokemonType);\r\n      \r\n      let pokemonData = await selectPokemonData(typeData.pokemon);\r\n\r\n      setPokemon(pokemonData);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  const toggleExclusiveType = () => {\r\n    setExclusiveType(!exclusiveType);\r\n  }\r\n  \r\n  const checkFiltered = (data: IPokemon[]) => {\r\n    return (!typeInput2 && exclusiveType) \r\n      ? data.filter((x) => x.type1 === typeInput1 && x.type2 === undefined) \r\n      : data;\r\n  }\r\n\r\n  return <div className=\"App\">\r\n      <h1>Pokemon Types</h1>\r\n      <TypeSelect title={\"Type 1\"} value={typeInput1} onChange={setTypeInput1} />\r\n      <ExclusiveTypeFilter checked={exclusiveType && !typeInput2} onChange={toggleExclusiveType} />\r\n      <TypeSelect title={\"Type 2\"} value={typeInput2} onChange={setTypeInput2} />\r\n      { (typeInput1 || typeInput2) && <button className=\"btn d-block mx-auto my-3\" onClick={() => setShowModal(true)}>Show Type Matchups</button>}\r\n      <TypeMatchupModal show={showModal} onHide={() => setShowModal(false)} type1={type1} type2={type2}/>\r\n      <FetchButton onClick={fetchPokemon} />\r\n      { loading && <PokeballSpinner /> }\r\n      <PokemonList data={checkFiltered(pokemon)} />\r\n      <Attribution />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from 'App';\r\n\r\n//import reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\nimport \"./bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}