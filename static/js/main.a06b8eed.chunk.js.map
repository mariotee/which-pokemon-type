{"version":3,"sources":["Util/string.ts","res/normal.png","res/grass.png","res/fire.png","res/water.png","res/electric.png","res/ice.png","res/fighting.png","res/poison.png","res/ground.png","res/flying.png","res/psychic.png","res/bug.png","res/rock.png","res/ghost.png","res/dark.png","res/dragon.png","res/steel.png","res/fairy.png","components/TypeSelect.tsx","components/FetchButton.tsx","components/PokemonList.tsx","components/Attribution.tsx","components/PokeballSpinner.tsx","App.tsx","index.tsx"],"names":["Capitalise","input","charAt","toUpperCase","slice","TYPES","getSymbol","pokemonType","NormalSymbol","GrassSymbol","FireSymbol","WaterSymbol","ElectricSymbol","IceSymbol","FightingSymbol","PoisonSymbol","GroundSymbol","FlyingSymbol","PsychicSymbol","BugSymbol","RockSymbol","GhostSymbol","DarkSymbol","DragonSymbol","SteelSymbol","FairySymbol","TypeSelect","title","value","onChange","Fragment","className","e","target","map","type","src","alt","FetchButton","onClick","PokemonList","data","pokemon","number","name","imageUrl","Attribution","href","PokeballSpinner","API_URL","App","React","useState","loading","setLoading","type1","setType1","type2","setType2","setPokemon","selectPokemonData","a","filteredData","filter","x","endsWith","pokemonDataSet","axios","get","url","pokemonData","push","id","sprites","front_default","fetchPokemon","length","data1","data2","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a06b8eed.chunk.js","sourcesContent":["export const Capitalise = (input: string) => {\r\n    return input.charAt(0).toUpperCase() + input.slice(1);\r\n}","export default __webpack_public_path__ + \"static/media/normal.a9776648.png\";","export default __webpack_public_path__ + \"static/media/grass.0c8a77ef.png\";","export default __webpack_public_path__ + \"static/media/fire.3277d77f.png\";","export default __webpack_public_path__ + \"static/media/water.2fcb40f7.png\";","export default __webpack_public_path__ + \"static/media/electric.2e3808d7.png\";","export default __webpack_public_path__ + \"static/media/ice.a9638502.png\";","export default __webpack_public_path__ + \"static/media/fighting.c777e8ec.png\";","export default __webpack_public_path__ + \"static/media/poison.8f3b0bcd.png\";","export default __webpack_public_path__ + \"static/media/ground.0ddb1818.png\";","export default __webpack_public_path__ + \"static/media/flying.7de276f3.png\";","export default __webpack_public_path__ + \"static/media/psychic.7f7cc4f4.png\";","export default __webpack_public_path__ + \"static/media/bug.167802fd.png\";","export default __webpack_public_path__ + \"static/media/rock.06ce1a1f.png\";","export default __webpack_public_path__ + \"static/media/ghost.7452d549.png\";","export default __webpack_public_path__ + \"static/media/dark.c0450a81.png\";","export default __webpack_public_path__ + \"static/media/dragon.3c3d4c99.png\";","export default __webpack_public_path__ + \"static/media/steel.86c2d7c9.png\";","export default __webpack_public_path__ + \"static/media/fairy.b3cc9537.png\";","import React from \"react\";\r\n\r\nimport { Capitalise } from \"Util/string\";\r\n\r\nimport NormalSymbol from \"res/normal.png\";\r\nimport GrassSymbol from \"res/grass.png\";\r\nimport FireSymbol from \"res/fire.png\";\r\nimport WaterSymbol from \"res/water.png\";\r\nimport ElectricSymbol from \"res/electric.png\";\r\nimport IceSymbol from \"res/ice.png\";\r\nimport FightingSymbol from \"res/fighting.png\";\r\nimport PoisonSymbol from \"res/poison.png\";\r\nimport GroundSymbol from \"res/ground.png\";\r\nimport FlyingSymbol from \"res/flying.png\";\r\nimport PsychicSymbol from \"res/psychic.png\";\r\nimport BugSymbol from \"res/bug.png\";\r\nimport RockSymbol from \"res/rock.png\";\r\nimport GhostSymbol from \"res/ghost.png\";\r\nimport DarkSymbol from \"res/dark.png\";\r\nimport DragonSymbol from \"res/dragon.png\";\r\nimport SteelSymbol from \"res/steel.png\";\r\nimport FairySymbol from \"res/fairy.png\";\r\n\r\nconst TYPES = [\r\n    \"normal\",\r\n    \"grass\",\r\n    \"fire\",\r\n    \"water\",\r\n    \"electric\",\r\n    \"ice\",\r\n    \"fighting\",\r\n    \"poison\",\r\n    \"ground\",\r\n    \"flying\",\r\n    \"psychic\",\r\n    \"bug\",\r\n    \"rock\",\r\n    \"ghost\",\r\n    \"dark\",\r\n    \"dragon\",\r\n    \"steel\",\r\n    \"fairy\",\r\n  ]\r\n\r\ninterface ITypeSelectProps {\r\n    title: string;\r\n    value: string;\r\n    onChange(input: string): void;\r\n}\r\n\r\nconst getSymbol = (pokemonType: string) => {\r\n    switch (pokemonType)\r\n    {\r\n        case \"normal\": return NormalSymbol;\r\n        case \"grass\": return GrassSymbol;\r\n        case \"fire\": return FireSymbol;\r\n        case \"water\": return WaterSymbol;\r\n        case \"electric\": return ElectricSymbol;\r\n        case \"ice\": return IceSymbol;\r\n        case \"fighting\": return FightingSymbol;\r\n        case \"poison\": return PoisonSymbol;\r\n        case \"ground\": return GroundSymbol;\r\n        case \"flying\": return FlyingSymbol;\r\n        case \"psychic\": return PsychicSymbol;\r\n        case \"bug\": return BugSymbol;\r\n        case \"rock\": return RockSymbol;\r\n        case \"ghost\": return GhostSymbol;\r\n        case \"dark\": return DarkSymbol;\r\n        case \"dragon\": return DragonSymbol;\r\n        case \"steel\": return SteelSymbol;\r\n        case \"fairy\": return FairySymbol;\r\n    }\r\n}\r\n\r\nconst TypeSelect = ({title, value, onChange}: ITypeSelectProps) => {\r\n    return <React.Fragment>\r\n        <label className=\"d-block\">{title}</label>\r\n        <select className=\"form-control\" value={value} onChange={(e) => {onChange(e.target.value)}}>\r\n        <option></option>\r\n        {\r\n            TYPES.map((type) => <option key={\"type1-o-\"+type} value={type}>{Capitalise(type)}</option>)\r\n        }\r\n        </select>\r\n        {value && <img src={getSymbol(value)} alt={\"Type: \" + value} />}\r\n    </React.Fragment>\r\n}\r\n\r\nexport default TypeSelect;","import React from \"react\";\r\n\r\ninterface IFetchButtonProps {\r\n    onClick(): void;\r\n}\r\n\r\nconst FetchButton = ({onClick}: IFetchButtonProps) => <button className=\"btn btn-primary d-block w-100\" onClick={onClick}>\r\n    Find Me Pokemon!\r\n</button>\r\n\r\nexport default FetchButton;","import { IPokemon } from \"models/Pokemon\";\r\nimport { Capitalise } from \"Util/string\";\r\n\r\ninterface IPokemonListProps {\r\n    data: IPokemon[];\r\n}\r\n\r\nconst PokemonList = ({data}: IPokemonListProps) => <ul className=\"list-group poke-list\">\r\n{\r\n    data.map((pokemon) => <li className=\"list-group-item\" key={\"pokemon-\"+pokemon.number}>\r\n        {pokemon.number}: {Capitalise(pokemon.name)}\r\n        {pokemon.imageUrl ? <img src={pokemon.imageUrl} alt={pokemon.name} /> : <strong> No Image Available</strong>}\r\n    </li>)\r\n}\r\n</ul>\r\n\r\nexport default PokemonList;","const Attribution = () => <footer className=\"text-left\">\r\n    <p>\r\n        Pokémon and Pokémon character names are trademarks of Nintendo\r\n        <br/>\r\n        Data from: <a href=\"https://pokeapi.co/\">Poke API</a>\r\n        <br/>\r\n        Pokemon Type Images from: <a href=\"https://www.deviantart.com/falke2009\">Falke2009 on DeviantArt</a>\r\n    </p>\r\n</footer>\r\n\r\nexport default Attribution;","import React from \"react\";\r\n\r\nconst PokeballSpinner = () => <React.Fragment>\r\n    <div className=\"pokeball-spinner\" />\r\n    <span>Loading...</span>\r\n</React.Fragment>\r\n\r\nexport default PokeballSpinner;\r\n","import React from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport './App.css';\r\n\r\nimport TypeSelect from 'components/TypeSelect';\r\nimport FetchButton from \"components/FetchButton\";\r\nimport PokemonList from 'components/PokemonList';\r\nimport Attribution from 'components/Attribution';\r\nimport { IPokemon, IPokemonFromType } from 'models/Pokemon';\r\nimport PokeballSpinner from 'components/PokeballSpinner';\r\n\r\nconst API_URL = \"https://pokeapi.co/api/v2/type\";\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [type1, setType1] = React.useState(\"\" as string);\r\n  const [type2, setType2] = React.useState(\"\" as string);  \r\n\r\n  const [pokemon, setPokemon] = React.useState([] as IPokemon[]);\r\n\r\n  const selectPokemonData = async (data: IPokemonFromType[]): Promise<IPokemon[]> => {    \r\n    const filteredData = data.filter((x) => !x.pokemon.name.endsWith(\"-totem\") && !x.pokemon.name.endsWith(\"-gmax\"));\r\n    const pokemonDataSet: IPokemon[] = [];\r\n\r\n    for (const pokemonType of filteredData) {\r\n      let pokemonData = await axios.get(pokemonType.pokemon.url);\r\n\r\n      pokemonDataSet.push({\r\n        name: pokemonData.data.name,\r\n        number: pokemonData.data.id,\r\n        imageUrl: pokemonData.data.sprites.front_default,\r\n      })\r\n    }\r\n\r\n    return pokemonDataSet;\r\n  }\r\n\r\n  const fetchPokemon = async () => {\r\n    setPokemon([]);\r\n    setLoading(true);    \r\n\r\n    if (type1.length > 0 && type2.length > 0) {\r\n      let data1 = await selectPokemonData((await axios.get(`${API_URL}/${type1}`)).data.pokemon);\r\n      let data2 = await selectPokemonData((await axios.get(`${API_URL}/${type2}`)).data.pokemon);\r\n            \r\n      setPokemon(data1.filter((x: IPokemon) => data2.map((x) => x.number).includes(x.number)));\r\n    } else if (type1.length > 0) {\r\n      let data = await selectPokemonData((await axios.get(`${API_URL}/${type1}`)).data.pokemon);\r\n\r\n      setPokemon(data);\r\n    } else if (type2.length > 0) {\r\n      let data = await selectPokemonData((await axios.get(`${API_URL}/${type2}`)).data.pokemon);\r\n\r\n      setPokemon(data);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  return <div className=\"App\">\r\n      <h1>Pokemon Types</h1>\r\n      <TypeSelect title={\"Type 1\"} value={type1} onChange={setType1} />\r\n      <TypeSelect title={\"Type 2\"} value={type2} onChange={setType2} />\r\n      <FetchButton onClick={fetchPokemon} />\r\n      { loading && <PokeballSpinner /> }\r\n      <PokemonList data={pokemon} />\r\n      <Attribution />\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from 'App';\r\n\r\n//import reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\nimport \"./bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}